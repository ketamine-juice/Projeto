data(testdata)
View(testdata)
data(testdata)
x=testdata[,9:248]
p=dim(x)[2]
for (i in 1:p){x[,i]=as.numeric(as.character(x[,i]))}
gr=testdata[,2]
gr=as.numeric(gr)
gr[which(gr<4)]=0
gr[which(gr==4)]=1
result=ZIBseq(data=x,outcome=gr)
View(testdata)
data_test =  testdata[,9:248]
View(data_test)
data_filtered = which(colSums(data_test)>2*dim(data_test)[1])
final_data = data[, data_test]
final_data = data_test[, data_filtered]
View(final_data)
sample_total = rowSums(final_data)
dim[final_data]
dim(final_data)
dim(final_data)[2]
View(final_data)
data(testdata)
x=testdata[,9:248]
p=dim(x)[2]
for (i in 1:p){x[,i]=as.numeric(as.character(x[,i]))}
gr=testdata[,2]
gr=as.numeric(gr)
gr[which(gr<4)]=0
gr[which(gr==4)]=1
result=ZIBseq(data=x,outcome=gr)
result$sigFeature
test = data(testdata)
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group = testdata[,2]
group
# Recode the "group" variable
group_1 = ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result = ZIBseq(data = data_mt, outcome = group_1)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
View(testdata)
test = data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group = testdata[,2]
View(testdata)
View(data_mt)
data_filtered = which(colSums(data_mt)>2*dim(data_mt)[1])
final_data = data_mt[, data_filtered]
View(final_data)
sample_total = rowSums(final_data)
taxa = dim(final_data)[2]
beta = matrix(data = NA,taxa,2)
View(beta)
transform = T
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
if (transform = T){
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
x.prop=sqrt(x.prop)
bereg=gamlss(x.prop ~ outcome, family=BEZI(sigma.link="identity"),trace=FALSE,control = gamlss.control(n.cyc = 100))
out=summary(bereg)
beta[i,]=out[2,c(1,4)]}
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
x.prop=sqrt(x.prop)
bereg=gamlss(x.prop ~ group, family=BEZI(sigma.link="identity"),trace=FALSE,control = gamlss.control(n.cyc = 100))
out=summary(bereg)
beta[i,]=out[2,c(1,4)]}
View(testdata)
View(data_mt)
View(final_data)
View(final_data)
# Supõe que tens o vetor de índices de genes
gene.index <- 1:nrow(final_data)
View(testdata)
for (k in 1:ceiling(length(gene.index) / 50)) {
gene.index.k = gene.index[(k-1)*50 + (1:50)]
gene.index.k = gene.index.k[!is.na(gene.index.k)]
print(length(gene.index.k))
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id,
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
sampleSum = sampleSum)
tmp <- tmp[!tmp$id %in% c(352, 420), ]
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
}
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id,
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
sampleSum = sampleSum)
for (k in 1:ceiling(length(gene.index) / 50)) {
gene.index.k = gene.index[(k-1)*50 + (1:50)]
gene.index.k = gene.index.k[!is.na(gene.index.k)]
print(length(gene.index.k))
gene.BEZI <- sapply(gene.index.k, function(i) {
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id,
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
sampleSum = sampleSum)
tmp <- tmp[!tmp$id %in% c(352, 420), ]
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
}
for (k in 1:ceiling(length(gene.index) / 50)) {
gene.index.k = gene.index[(k-1)*50 + (1:50)]
gene.index.k = gene.index.k[!is.na(gene.index.k)]
print(length(gene.index.k))
gene.BEZI <- sapply(gene.index.k, function(i) {
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id,
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
sampleSum = sampleSum)
tmp <- tmp[!tmp$id %in% c(352, 420), ]
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
}
View(object)
gene.index.k = gene.index[(k-1)*50 + (1:50)]
gene.index.k = gene.index.k[!is.na(gene.index.k)]
print(length(gene.index.k))
gene.BEZI <- sapply(gene.index.k, function(i) {
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id,
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
tmp <- tmp[!tmp$id %in% c(352, 420), ]
print(dim(tmp))
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
tmp <- tmp[!tmp$id %in% c(352, 420), ]
t
t
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
,
tmp <- tmp[!tmp$id %in% c(352, 420), ]
print(dim(tmp))
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
,
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
,
print(dim(tmp)),
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
#    cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(final_data[i, -1]),
id = testdata$sample_id
#phenotype = testdata$ECC.bin,
#batch = outcome.118$RNA.date,
#sampleSum = sampleSum)
,
print(dim(tmp)),
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
View(data.row.names)
for (k in 1:ceiling(length(gene.index) / 50)) {
gene.marginal.RPK.RNA = testdata[, c(2, 9:248)]
gene.marginal.RPK.RNA = testdata[, c(2, 9:248)]
gene.marginal.RPK.RNA = testdata[, c(2, 9:248)]
#Load the package
library("ZIBseq")
gene.marginal.RPK.RNA = testdata[, c(2, 9:248)]
#Testing ZIBseq
data(testdata)
gene.marginal.RPK.RNA = testdata[, c(2, 9:248)]
View(gene.marginal.RPK.RNA)
View(testdata)
gene.marginal.RPK.RNA = testdata[, c(1, 9:248)]
View(gene.marginal.RPK.RNA)
outcome.118 = testdata[, c(2)]
(gene.marginal.RPK.RNA[,-1] %>% as.matrix %>% as.vector) -> a
library(tidyverse)
(gene.marginal.RPK.RNA[,-1] %>% as.matrix %>% as.vector) -> a
View(gene.marginal.RPK.RNA)
a[a>0] %>% sort %>% head
sampleSum = apply(gene.marginal.RPK.RNA[,-1], 2, sum)
gene.index.k = gene.index[(k-1)*5000 + (1:5000)]
screen.gene <- function(data, avg.detect = 2, gene.col = NULL) {
# data: each column = sample, each row = genes
# gene.col: the column where gene names are provided. If null, ignored.
gene.name = data[,gene.col]
if (!is.null(gene.col)) data = data[,-gene.col]
n.genes = dim(data)[1]
n.sample = dim(data)[2]
useF = which(rowSums(data) > avg.detect * n.sample)
print(paste(length(useF), "out of ", n.genes, " will be used."))
list(sample.size = n.sample,
stat = c(use = length(useF), out.of = n.genes, percentage = round(length(useF)/n.genes,2)*100),
feature = list(index = useF, names = if (is.null(gene.col)) NA else gene.name[useF]))
}
gene.index.k = screen.gene(gene.marginal.RPK.RNA)
gene.marginal.RPK.RNA = testdata[, c(1, 9:248)]
outcome.118 = testdata[, c(2)]
(gene.marginal.RPK.RNA[,-1] %>% as.matrix %>% as.vector) -> a
a[a>0] %>% sort %>% head
sampleSum = apply(gene.marginal.RPK.RNA[,-1], 2, sum)
gene.index.k = gene.index[(k-1)*5000 + (1:5000)]
screen.gene <- function(data, avg.detect = 2, gene.col = NULL) {
# data: each column = sample, each row = genes
# gene.col: the column where gene names are provided. If null, ignored.
gene.name = data[,gene.col]
if (!is.null(gene.col)) data = data[,-gene.col]
n.genes = dim(data)[1]
n.sample = dim(data)[2]
useF = which(rowSums(data) > avg.detect * n.sample)
print(paste(length(useF), "out of ", n.genes, " will be used."))
list(sample.size = n.sample,
stat = c(use = length(useF), out.of = n.genes, percentage = round(length(useF)/n.genes,2)*100),
feature = list(index = useF, names = if (is.null(gene.col)) NA else gene.name[useF]))
}
gene.index = screen.gene(gene.marginal.RPK.RNA)
View(gene.index)
gene.index.k = gene.index[(k-1)*5000 + (1:5000)]
args = commandArgs(trailingOnly=TRUE)  # passed from Script_Boyang
method = args[1] %>% as.numeric  # 1..5
k = args[2] %>% as.numeric
gene.index.k = gene.index[(k-1)*5000 + (1:5000)]
gene.index.k = gene.index.k[!is.na(gene.index.k)]
View(gene.marginal.RPK.RNA)
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118$,
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118$, sampleSum = sampleSum)
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
e
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
j <<- 1; cat("j=")
j <<- 1; cat("j=")
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
View(gene.marginal.RPK.RNA)
outcome.118 <- outcome.118[, 1:240]
outcome.118 <- factor(outcome.118, levels = levels(outcome.118)[1:240])
outcome.118 <- factor(outcome.118, levels = levels(outcome.118)[1:240])
outcome.118
# Obter os 240 primeiros níveis
levels_to_keep <- unique(outcome.118)[1:240]
# Substituir os níveis do factor apenas pelos primeiros 240
outcome.118 <- factor(outcome.118, levels = levels_to_keep)
outcome.118 = testdata[1:240, c(2)]
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
LB <- function(data, outcome, transform = F, alpha = 0.05){
# data: a matrix records the count datA
# outcome: a categorical vector of a specific kind of clinical condition
# transform: square-root transform of the compositional matrix
# alpha: customized threshold while calculating q values
data_filtered = which(colSums(data)>2*dim(data)[1])
final_data = data[, data_filtered]
sample_total = rowSums(final_data)
taxa = dim(final_data)[2]
beta = matrix(data = NA,taxa,2)
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
if (transform = T){
x.prop=sqrt(x.prop)
}
bereg=gamlss(x.prop ~ outcome, family=BEZI(sigma.link="identity"),trace=FALSE,control = gamlss.control(n.cyc = 100))
out=summary(bereg)
beta[i,]=out[2,c(1,4)]}  ## get all the coefficients and P values in beta regression
LB <- function(data, outcome, transform = F, alpha = 0.05){
# data: a matrix records the count datA
# outcome: a categorical vector of a specific kind of clinical condition
# transform: square-root transform of the compositional matrix
# alpha: customized threshold while calculating q values
data_filtered = which(colSums(data)>2*dim(data)[1])
final_data = data[, data_filtered]
sample_total = rowSums(final_data)
taxa = dim(final_data)[2]
beta = matrix(data = NA,taxa,2)
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
if (transform = T){
LB <- function(data, outcome, transform = F, alpha = 0.05){
# data: a matrix records the count datA
# outcome: a categorical vector of a specific kind of clinical condition
# transform: square-root transform of the compositional matrix
# alpha: customized threshold while calculating q values
data_filtered = which(colSums(data)>2*dim(data)[1])
final_data = data[, data_filtered]
sample_total = rowSums(final_data)
taxa = dim(final_data)[2]
beta = matrix(data = NA,taxa,2)
for (i in 1:taxa) {
x.prop = final_data[,i]/sample_total
if (transform == T){
x.prop=sqrt(x.prop)
}
bereg=gamlss(x.prop ~ outcome, family=BEZI(sigma.link="identity"),trace=FALSE,control = gamlss.control(n.cyc = 100))
out=summary(bereg)
beta[i,]=out[2,c(1,4)]}  ## get all the coefficients and P values in beta regression
pvalues=beta[,2]
qvalues=calc_qvalues(pvalues)
sig=which(qvalues<alpha)
sigFeature=colnames(X)[sig]
list(sigFeature=sigFeature,useFeature=P,qvalues=qvalues, pvalues=pvalues) }
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = gene.marginal.RPK.RNA[i,-1] %>% as.numeric,
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]),
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
outcome.118 = factor(ifelse(outcome.118==0,0,1))
outcome.118 = factor(ifelse(outcome.118==0,0,1))
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]),
phenotype = outcome.118, sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum)
print(dim(tmp))  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
View(gene.BEZI)
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))  # 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
outcome.118 = testdata[1:240, c(2)] #coloquei só as 240 linhas para dar dps match
outcome.118 = testdata[1:240, c(2)] #coloquei só as 240 linhas para dar dps match
outcome.118 = factor(ifelse(==0,0,1))
outcome.118 = factor()
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
outcome.118 = testdata[1:240, c(2)] #coloquei só as 240 linhas para dar dps match
outcome.118 = factor()
outcome.118 = testdata[1:240, c(2)] #coloquei só as 240 linhas para dar dps match
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
outcome.118 = as.factor(testdata[1:240, c(2)]) #coloquei só as 240 linhas para dar dps match
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
outcome.118 = as.numeric(testdata[1:240, c(2)]) #coloquei só as 240 linhas para dar dps match
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, phenotype = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), sampleSum = sampleSum, outcome = outcome.118)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j,".." ); j <<- j+1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i,-1]), outcome = outcome.118,sampleSum = sampleSum)
print(dim(tmp))
LB(tmp)# 3 (zero, nonzero, global) x 2 (coef, pval) ... so c(3,6) to be extracted
})
gene.BEZI <- sapply(gene.index.k, function(i) {
cat(j, ".."); j <<- j + 1
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i, -1]),
outcome = outcome.118,
sampleSum = sampleSum)
# Chamando LB() com tmp estruturado corretamente
LB(tmp$outcome, tmp$y, tmp$sampleSum)
})
View(gene.index.k)
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[i, -1]),
outcome = outcome.118,
sampleSum = sampleSum)
tmp <- data.frame(y = as.numeric(gene.marginal.RPK.RNA[, -1]),
outcome = outcome.118,
sampleSum = sampleSum)
View(gene.marginal.RPK.RNA)
outcome.118 = as.numeric(testdata[1:240,c(1,2,3)])
outcome.118 = as.numeric(testdata[1:240,c(1,2,3)])
outcome.118 = as.numeric(testdata[1:240,c(2,3)])
outcome.118 = as.numeric(as.data.frame(testdata[1:240,c(2,3)]))
library(gamlss)
library(qvalue)
#Metatranscriptomic data
data_mt = testdata[,9:248]
View(data_mt)
# Filtrar genes com contagem mínima
data_filtered <- data[, colSums(data_mt) > 2 * nrow(data_mt)]
# Filtrar genes com contagem mínima
data_filtered <- data_mt[, colSums(data_mt) > 2 * nrow(data_mt)]
# Calculando total de amostras por gene
sample_total <- rowSums(data_filtered)
