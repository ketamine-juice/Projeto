#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
View(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
View(data_mt)
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
columns
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
View(testdata)
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
#Get original groups corresponding to value 1
original_groups_1 <- names(group_mapping[group_mapping == 1])
original_groups_2 <- names(group_mapping[group_mapping == 2])
original_groups_3 <- names(group_mapping[group_mapping == 3])
original_groups_4 <- names(group_mapping[group_mapping == 4])
#Display the original groups for value 1
cat("Mapped value of 1 corresponds to original groups:", original_groups_1, "\n")
cat("Mapped value of 2 corresponds to original groups:", original_groups_2, "\n")
cat("Mapped value of 3 corresponds to original groups:", original_groups_3, "\n")
cat("Mapped value of 4 corresponds to original groups:", original_groups_4, "\n")
#Sets all values in group that are less than 4 (N, O and OM) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OB) to 1
group[which(group==4)]=1
#Vector becomes binary
group
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
count(result$qvalues)
lenght(result$qvalues)
result$pvalues
count(result$sigFeature)
length(result$sigFeature)
length(result$pvalues)
result$sigFeature
result$useFeature
#Performs DGE with the square-root transformation of the data
result_transformed = ZIBseq(data = data_mt, outcome = group, transform = TRUE)
result_transformed$sigFeature
result_transformed$useFeature
result_transformed$qvalues
result_transformed$pvalues
result$sigFeature
cat("Mapped value of 4 corresponds to original groups:", original_groups_4, "\n")
cat("Mapped value of 3 corresponds to original groups:", original_groups_3, "\n")
group
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
group
#Sets all values in group that are less than 4 (N, O and OM) to 0
group_2 = group[which(group<3)]=0
group_2 = group[which(group==4)]=0
#Sets all values in gr that are equal to 4 (OB) to 1
group[which(group==3)]=1
group
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group)
result_OM$qvalues
result_OM$pvalues
result_OM$sigFeature
result_OM$useFeature
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
group_2 = group[which(group<3)]=0
group_2 = group[which(group==4)]=0
group_2 = [which(group==3)]=1
group_2 = group[which(group==3)] = 1
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group_2)
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
#Get original groups corresponding to value 1
original_groups_1 <- names(group_mapping[group_mapping == 1])
original_groups_2 <- names(group_mapping[group_mapping == 2])
original_groups_3 <- names(group_mapping[group_mapping == 3])
original_groups_4 <- names(group_mapping[group_mapping == 4])
#Display the original groups for value 1
cat("Mapped value of 1 corresponds to original groups:", original_groups_1, "\n")
cat("Mapped value of 2 corresponds to original groups:", original_groups_2, "\n")
cat("Mapped value of 3 corresponds to original groups:", original_groups_3, "\n")
cat("Mapped value of 4 corresponds to original groups:", original_groups_4, "\n")
#Sets all values in group that are less than 4 (N, O and OM) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OB) to 1
group[which(group==4)]=1
#Vector becomes binary
group
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Performs DGE with the square-root transformation of the data
result_transformed = ZIBseq(data = data_mt, outcome = group, transform = TRUE)
result_transformed$sigFeature
result_transformed$useFeature
result_transformed$qvalues
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
group_2 = group[which(group<3)]=0
group_2 = group[which(group==4)]=0
group_2 = group[which(group==3)] = 1
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group_2)
group_2
#Vector with class labels for the samples
group_2 = testdata[,2]
#Converts the group vector to numeric format
group_2 = as.numeric(group_2)
group_2
group_2[which(group_2<3)]=0
group_2[which(group_2==4)]=0
group_2[which(group_2==3)] = 1
group_2
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group_2)
result_OM$qvalues
result_OM$pvalues
result_OM$sigFeature
result_OM$useFeature
group_2
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group_2, transform = TRUE)
result_OM$qvalues
result_OM$pvalues
result_OM$sigFeature
result_OM$useFeature
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
group
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OM) to 0
group[which(group<4)]=0
group
#Sets all values in gr that are equal to 4 (OB) to 1
group[which(group==4)]=1
#Vector becomes binary
group
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Vector with class labels for the samples
group_2 = testdata[,2]
group_2
#Converts the group vector to numeric format
group_2 = as.numeric(group_2)
group_2[which(group_2<3)]=0
group_2
group_2[which(group_2==4)]=0
group_2
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Vector with class labels for the samples
group_2 = testdata[,2]
group_2
#Converts the group vector to numeric format
group_2 = as.numeric(group_2)
#Converts the group vector to numeric format
group_2 = as.numeric(group_2)
group_2
group_2[which(group_2<3)]=0
group_2
group_2[which(group_2==4)]=0
group_2[which(group_2==3)] = 1
group_2
#Vector becomes binary
type(group)
#Vector becomes binary
class(group)
class(group_2)
#Perfoms DGE
result_OM = ZIBseq(data = data_mt, outcome = group_2, transform = TRUE)
result_OM$qvalues
result_OM$pvalues
result_OM$sigFeature
result_OM$useFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)]=0
group_3[which(group_3==4)]=1
group_3[which(group_3==3)] = 1
group_3
class(group_3)
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Create a mapping dictionary
group_mapping = c("N" = 1, "O" = 2, "OM" = 3, "OB" = 4)
#Get original groups corresponding to value 1
original_groups_1 <- names(group_mapping[group_mapping == 1])
original_groups_2 <- names(group_mapping[group_mapping == 2])
original_groups_3 <- names(group_mapping[group_mapping == 3])
original_groups_4 <- names(group_mapping[group_mapping == 4])
#Display the original groups for value 1
cat("Mapped value of 1 corresponds to original groups:", original_groups_1, "\n")
cat("Mapped value of 2 corresponds to original groups:", original_groups_2, "\n")
cat("Mapped value of 3 corresponds to original groups:", original_groups_3, "\n")
cat("Mapped value of 4 corresponds to original groups:", original_groups_4, "\n")
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Performs DGE with the square-root transformation of the data
result_transformed = ZIBseq(data = data_mt, outcome = group, transform = TRUE)
result_transformed$sigFeature
result_transformed$useFeature
result_transformed$qvalues
result_transformed$pvalues
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)]=0
group_3[which(group_3==4)]=1
group_3[which(group_3==3)] = 1
group_3
class(group_3)
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3, transform = TRUE)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<3)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
group[which(group==3)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group_2 = testdata[,2]
#Converts the group vector to numeric format
group_2 = as.numeric(group_2)
group_2[which(group_2<3)]=0
group_2[which(group_2==4)]=0
group_2[which(group_2==3)] = 1
class(group_2)
#Perfoms DGE
result_OB = ZIBseq(data = data_mt, outcome = group_2, transform = TRUE)
result_OB$qvalues
result_OB$pvalues
result_OB$sigFeature
result_OB$useFeature
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3==4)] = 1
group_3[which(group_3==3)] = 1
group_3
class(group_3)
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
#Vector with class labels for the samples
group_4 = testdata[,2]
group_4
View(data_mt)
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
#Perfoms DGE
result_4 = ZIBseq(data = data_mt, outcome = group_4)
result_4$qvalues
result_$pvalues
result_4$sigFeature
result_4$useFeature
#Load the package
library("ZIBseq")
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3==4)] = 1
group_3[which(group_3==3)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<4)] = 0
group_3[which(group_3==4)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3 ==3)] = 1
group_3[which(group_3==4)] = 0
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3 ==3)] = 1
group_3[which(group_3==4)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
