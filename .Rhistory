group_sqrt
group = testdata[,2]
# Recode the "group" variable
group_sqrt = ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result_sqrt = ZIBseq(data = data_mt, outcome = group_sqrt, transform = TRUE)
result_sqrt$qvalues
result_sqrt$pvalues
result_sqrt$sigFeature
result_sqrt$useFeature
group = testdata[,2]
group
# Convert "group" to ordinal variables
group_numeric <- factor(group, levels = c("N", "O", "OB", "OM"), ordered = TRUE)
# Check the levels and their corresponding numeric values
levels(group_numeric)
# Convert the ordinal factor to numeric values
group_numeric <- as.numeric(group_numeric)
group_numeric
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
group_num
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group_num)
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num)
result_num$qvalues
result_num$pvalues
result_num$sigFeature
result_num$useFeature
group
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
#Perfoms DGE
result_num_sqrt = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
result_num_sqrt$qvalues
result_num_sqrt$pvalues
result_num_sqrt$sigFeature
result_num_sqrt$useFeature
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group = testdata[,2]
group
library(DESeq2)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = group, design = ~ group)
meta_data = testdata[,1:8]
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
View(data_mt)
View(meta_data)
meta_data = t(meta_data)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
meta_data = testdata[,1:8]
data_mt = t(data_mt)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Run analysis
dds <- DESeq(dds)
# Get summary of results
summary(results)
# Extract significant results (using adjusted p-value cutoff, e.g., 0.05)
significant_results <- results[results$padj < 0.05, ]
# Print significant results
print(significant_results)
res <- results(dds, alpha = 0.05)
res
res <- results(dds, contrast = c("group","N","O", "OM", "OB")alpha = 0.05)
res <- results(dds, contrast = c("group","N","O", "OM", "OB"),alpha = 0.05)
res <- results(dds, contrast = c("group","OM", "OB"),alpha = 0.05)
res
res[order(res$padj),]
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
res[order(res$padj),]
res <- results(dds, contrast = c("group", "OM", "N+B+OB"),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", c("B", "O", "OB")),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", c("B", "N", "OB")),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
res[order(res$padj),]
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
#Metatranscriptomic data
data_mt = testdata[,9:248]
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
data_mt = t(data_mt)
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
data_mt = t(data_mt)
meta_data = testdata[,1:8]
group = testdata[,2]
group
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
## Run analysis
dds <- DESeq(dds)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
View(dds)
View(data_mt)
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
View(data_mt)
#Meta data
meta_data = testdata[,1:8]
View(meta_data)
#Preparing dataframe to compare
group = testdata[,2]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
#Vector becomes binary
group_num
#Vector becomes binary
group_num
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group_num)
View(meta_data)
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group_num)
#Vector becomes binary
group_num
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
#Meta data
meta_data = testdata[,1:8]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
group
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
#Vector becomes binary
factor(group)
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ 1)
group
class(group)
## Run analysis
dds <- DESeq(dds)
no
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
#Meta data
meta_data = testdata[,1:8]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]="other"
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]="OM"
#Vector becomes binary
factor(group)
meta_data$group = ifelse(meta_data$group == "OM", "OM", "other")
View(meta_data)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Run analysis
dds <- DESeq(dds)
res <- results(dds, contrast = c("group", "OM", "other"),alpha = 0.05)
sum(res$padj < 0.05, na.rm=TRUE)
res$padj < 0.05
res$padj
sum(res$padj < 0.05, na.rm=TRUE)
#Using ZIBseq testdata
data(testdata)
#Load the package
library("ZIBseq")
library(DESeq2)
#Using ZIBseq testdata
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
View(data_mt)
#Meta data
meta_data = testdata[,1:8]
#Preparing dataframe to compare (design)
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]="other"
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]="OM"
#Vector becomes binary
factor(group)
#Making metadata correspond to the design
meta_data$group = ifelse(meta_data$group == "OM", "OM", "other")
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Run analysis
dds <- DESeq(dds)
#Obtain results
res = results(dds, contrast = c("group", "OM", "other"),alpha = 0.05)
sum(res$padj < 0.05, na.rm=TRUE)
qvalue(res$pvalue)
BiocManager::install("qvalue")
force = TRUE
library(qvalue)
qvalue(res$pvalue)
q_value = qvalue(res$pvalue)
q_value$qvalues
sum(q_value$qvalues < 0.05, na.rm=TRUE)
data_mt$correspondence = group
q_value$qvalues
row_names <- rownames(data_mt)
View(data_mt)
#Metatranscriptomic data
data_mt = testdata[,9:248]
row_names <- rownames(data_mt)
View(data_mt)
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
row_names <- rownames(data_mt)
row_names
named_q_values <- setNames(q_values$qvalues, row_names)
named_q_values <- setNames(q_value$qvalues, row_names)
named_q_values
# Select names where q-values are less than 0.05
significant_names <- names(named_q_values[named_q_values < 0.05])
significant_names
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group = testdata[,2]
# Recode the "group" variable
group_1 = ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result = ZIBseq(data = data_mt, outcome = group_1)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
#Vector becomes binary
group_num
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num)
result_num$qvalues
result_num$pvalues
result_num$sigFeature
#Perfoms DGE
result_num_sqrt = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
result_num_sqrt$qvalues
result_num_sqrt$pvalues
sum(resut_num_sqrt$padj < 0.05)
result_num_sqrt$sigFeature
#Perfoms DGE
result_num_sqrt_2 = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
result_num_sqrt_2$qvalues
result_num_sqrt$qvalues
result_num_sqrt_2$pvalues
result_num_sqrt$pvalues
result_num_sqrt_2$sigFeature
View(testdata)
group = testdata[,2]
group
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
#Vector becomes binary
group_num
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num)
group = testdata[,2]
group
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
result_ord = ZIBseq(data = data_mt, outcome = group)
result_ord$sigFeature
result_ord = ZIBseq(data = data_mt, outcome = group_num)
result_ord$sigFeature
result_ord_sqrt = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
result_ord_sqrt$sigFeature
group_num
View(testdata)
testdata_2 = data("testdata")
testdata_2 = data(testdata)
test_data2 = testdata
View(test_data2)
test_data2$acidovorax[test_data2$group == "N" | test_data2$group == "OM"] <- 2
test_data2$acidovorax
View(test_data2)
class(test_data2$acidovorax)
test_data2 = testdata
test_data2$Acidovorax
test_data2$Acidovorax[test_data2$group == "N" | test_data2$group == "OM"] <- 2
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
#Number of columns of the metatranscriptomic data
columns = dim(test_data2)[2]
#Converts the data to numeric format
for (col in 1:columns){test_data2[,col]=as.numeric(as.character(test_data2[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
results_acido$sigFeature
results_acido = ZIBseq(data = test_data2, outcome = group_acido, transform = TRUE )
results_acido
test_data2$Acidovorax[test_data2$group == "N" | test_data2$group == "OM"] <- 400
#Number of columns of the metatranscriptomic data
columns = dim(test_data2)[2]
#Converts the data to numeric format
for (col in 1:columns){test_data2[,col]=as.numeric(as.character(test_data2[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
results_acido$sigFeature
results_acido = ZIBseq(data = test_data2, outcome = group_acido, transform = TRUE )
results_acido
View(test_data2)
test_data2$Acidovorax[test_data2$group == "N" | test_data2$group == "OM"] <- 400
test_data2 = testdata
test_data2$Acidovorax[test_data2$group == "N" | test_data2$group == "OM"] <- 400
#Number of columns of the metatranscriptomic data
columns = dim(test_data2)[2]
#Converts the data to numeric format
for (col in 1:columns){test_data2[,col]=as.numeric(as.character(test_data2[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
results_acido$sigFeature
results_acido = ZIBseq(data = test_data2, outcome = group_acido, transform = TRUE )
results_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido, transform = TRUE )
#Number of columns of the metatranscriptomic data
columns = dim(test_data2)[2]
results_acido
test_data2 = testdata
test_data2$Acidovorax[test_data2$group == "N"] <- 400
#Number of columns of the metatranscriptomic data
columns = dim(test_data2)[2]
#Converts the data to numeric format
for (col in 1:columns){test_data2[,col]=as.numeric(as.character(test_data2[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
group_acido
results_acido = ZIBseq(data = test_data2, outcome = group_acido )
results_acido$sigFeature
test_data3 = testdata
test_data3$Ahrensia[test_data3$group == "OM"] <- 10
test_data3 = testdata
test_data3$Ahrensia[test_data3$group == "OM"] <- 10
View(test_data3)
#Number of columns of the metatranscriptomic data
columns = dim(test_data3)[2]
#Converts the data to numeric format
for (col in 1:columns){test_data3[,col]=as.numeric(as.character(test_data3[,col]))}
group_acido = testdata[,2]
group_acido = as.numeric(group_acido)
results_acido = ZIBseq(data = test_data3, outcome = group_acido )
results_acido$sigFeature
results_ordinal = ZIBseq(data = testdata, outcome = bmi)
bmi = testdata[,3]
results_ordinal = ZIBseq(data = testdata, outcome = )
results_ordinal = ZIBseq(data = testdata, outcome = bmi)
bmi = testdata[,3]
bmi = as.numeric(bmi)
results_ordinal = ZIBseq(data = testdata, outcome = bmi)
results_ordinal = ZIBseq(data = data_mt, outcome = bmi)
results_ordinal
