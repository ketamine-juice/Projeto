group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
#Perfoms DGE
result_4 = ZIBseq(data = data_mt, outcome = group_4)
result_4$qvalues
result_$pvalues
result_4$sigFeature
result_4$useFeature
#Load the package
library("ZIBseq")
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3==4)] = 1
group_3[which(group_3==3)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<4)] = 0
group_3[which(group_3==4)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3 ==3)] = 1
group_3[which(group_3==4)] = 0
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3 ==3)] = 1
group_3[which(group_3==4)] = 1
group_3
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group_4 = testdata[,2]
group_4
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3==4)] = 1
group_3[which(group_3==3)] = 1
group_3
class(group_3)
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
result_3$useFeature
library(ALL)
data(ALL)
#Vector with class labels for the samples
group_4 = testdata[,2]
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
View(data_mt)
#Vector with class labels for the samples
group_4 = testdata[,2]
group_4
#Perfoms DGE
result_4 = ZIBseq(data = data_mt, outcome = group_4)
result_4$qvalues
result_4$pvalues
result_4$sigFeature
result_4$useFeature
#Instalation of package
install.packages("C:/Users/olive/Desktop/ZIBseq_1.2/ZIBseq", repos = NULL, type = "source")
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
#Vector with class labels for the samples
group_3 = testdata[,2]
#Converts the group vector to numeric format
group_3 = as.numeric(group_3)
group_3
group_3[which(group_3<3)] = 0
group_3[which(group_3==4)] = 1
group_3[which(group_3==3)] = 1
group_3
class(group_3)
#Perfoms DGE
result_3 = ZIBseq(data = data_mt, outcome = group_3)
result_3$qvalues
result_3$pvalues
result_3$sigFeature
group_3
class(group_3)
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
View(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
View(data_mt)
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
average_reads <- colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep <- average_reads >= 2
df_filtered <- data_mt[, columns_to_keep]
View(df_filtered)
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = df_filtered, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
#Vector with class labels for the samples
group = testdata[,2]
group
# Recode the "group" variable
group_comparison <- ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result <- ZIBseq(data = df_filtered, outcome = group_comparison)
result$sigFeature
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
class(group)
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group)
result$qvalues
result$pvalues
result$sigFeature
result$useFeature
# Recode the "group" variable
group_sqrt = ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result_sqrt = ZIBseq(data = data_mt, outcome = group_sqrt, transform = TRUE)
group_sqrt
group = testdata[,2]
# Recode the "group" variable
group_sqrt = ifelse(group == "OM", "OM", "N_OW_OB")
# Run the ZIBseq analysis
result_sqrt = ZIBseq(data = data_mt, outcome = group_sqrt, transform = TRUE)
result_sqrt$qvalues
result_sqrt$pvalues
result_sqrt$sigFeature
result_sqrt$useFeature
group = testdata[,2]
group
# Convert "group" to ordinal variables
group_numeric <- factor(group, levels = c("N", "O", "OB", "OM"), ordered = TRUE)
# Check the levels and their corresponding numeric values
levels(group_numeric)
# Convert the ordinal factor to numeric values
group_numeric <- as.numeric(group_numeric)
group_numeric
#Vector with class labels for the samples
group = testdata[,2]
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
group_num
#Perfoms DGE
result = ZIBseq(data = data_mt, outcome = group_num)
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num)
result_num$qvalues
result_num$pvalues
result_num$sigFeature
result_num$useFeature
group
#Perfoms DGE
result_num = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
#Perfoms DGE
result_num_sqrt = ZIBseq(data = data_mt, outcome = group_num, transform = TRUE)
result_num_sqrt$qvalues
result_num_sqrt$pvalues
result_num_sqrt$sigFeature
result_num_sqrt$useFeature
#Load the package
library("ZIBseq")
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
group = testdata[,2]
group
library(DESeq2)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = group, design = ~ group)
meta_data = testdata[,1:8]
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
View(data_mt)
View(meta_data)
meta_data = t(meta_data)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
meta_data = testdata[,1:8]
data_mt = t(data_mt)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Run analysis
dds <- DESeq(dds)
# Get summary of results
summary(results)
# Extract significant results (using adjusted p-value cutoff, e.g., 0.05)
significant_results <- results[results$padj < 0.05, ]
# Print significant results
print(significant_results)
res <- results(dds, alpha = 0.05)
res
res <- results(dds, contrast = c("group","N","O", "OM", "OB")alpha = 0.05)
res <- results(dds, contrast = c("group","N","O", "OM", "OB"),alpha = 0.05)
res <- results(dds, contrast = c("group","OM", "OB"),alpha = 0.05)
res
res[order(res$padj),]
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
res[order(res$padj),]
res <- results(dds, contrast = c("group", "OM", "N+B+OB"),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", c("B", "O", "OB")),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", c("B", "N", "OB")),alpha = 0.05)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
res[order(res$padj),]
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
#Metatranscriptomic data
data_mt = testdata[,9:248]
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
data_mt = t(data_mt)
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
data_mt = t(data_mt)
meta_data = testdata[,1:8]
group = testdata[,2]
group
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
## Run analysis
dds <- DESeq(dds)
res <- results(dds, contrast = c("group", "OM", "N"),alpha = 0.05)
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
View(dds)
View(data_mt)
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
View(data_mt)
#Meta data
meta_data = testdata[,1:8]
View(meta_data)
#Preparing dataframe to compare
group = testdata[,2]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group_num = as.numeric(group)
group_num
#Sets all values in group that are less than 4 (N, O and OB) to 0
group_num[which(group_num<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group_num[which(group_num==4)]=1
#Vector becomes binary
group_num
#Vector becomes binary
group_num
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group_num)
View(meta_data)
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group_num)
#Vector becomes binary
group_num
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
#Meta data
meta_data = testdata[,1:8]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]=0
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]=1
#Vector becomes binary
group
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
#Vector becomes binary
factor(group)
meta_data$group = ifelse(meta_data$group == "OM", 1, 0)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ 1)
group
class(group)
## Run analysis
dds <- DESeq(dds)
no
#Testing ZIBseq
data(testdata)
#Metatranscriptomic data
data_mt = testdata[,9:248]
#Number of columns of the metatranscriptomic data
columns = dim(data_mt)[2]
#Converts the data to numeric format
for (col in 1:columns){data_mt[,col]=as.numeric(as.character(data_mt[,col]))}
# Calculate the average reads for each column
average_reads = colMeans(data_mt)
# Find the columns with average reads below 2
columns_to_keep = average_reads >= 2
# Subset the dataframe to keep only the columns with average reads >= 2
data_mt <- data_mt[, columns_to_keep]
#Deseq2 must use this form of countData
data_mt = t(data_mt)
#Meta data
meta_data = testdata[,1:8]
#Preparing dataframe to compare
group = testdata[,2]
#Converts the group vector to numeric format
group = as.numeric(group)
group
#Sets all values in group that are less than 4 (N, O and OB) to 0
group[which(group<4)]="other"
#Sets all values in gr that are equal to 4 (OM) to 1
group[which(group==4)]="OM"
#Vector becomes binary
factor(group)
meta_data$group = ifelse(meta_data$group == "OM", "OM", "other")
View(meta_data)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data_mt, colData = meta_data , design = ~ group)
## Run analysis
dds <- DESeq(dds)
res <- results(dds, contrast = c("group", "OM", "other"),alpha = 0.05)
sum(res$padj < 0.05, na.rm=TRUE)
res$padj < 0.05
res$padj
sum(res$padj < 0.05, na.rm=TRUE)
